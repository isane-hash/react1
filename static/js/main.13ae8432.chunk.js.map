{"version":3,"sources":["listItems.js","App.js","serviceWorker.js","index.js"],"names":["listItems","App","props","state","items","currentItem","text","key","handleInput","bind","additem","e","this","setState","target","value","Date","now","preventDefault","newItem","newItems","className","id","type","placeholder","onChange","React","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iTAiBeA,ICqDAC,E,YAjEX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,MAAO,GACPC,YAAa,CACTC,KAAM,GACNC,IAAK,KAIb,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAEnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBAZA,E,yEAePE,GACRC,KAAKC,SAAS,CACVR,YAAa,CACTC,KAAMK,EAAEG,OAAOC,MACfR,IAAKS,KAAKC,W,8BAIdN,GACJA,EAAEO,iBACF,IAAMC,EAAUP,KAAKT,MAAME,YAC3B,GAAqB,KAAjBc,EAAQb,KAAa,CACrB,IAAMc,EAAQ,sBAAOR,KAAKT,MAAMC,OAAlB,CAAyBe,IACvCP,KAAKC,SAAS,CACVT,MAAOgB,EACPf,YAAa,CACTC,KAAM,GACNC,IAAK,S,+BASjB,OAAS,yBACDc,UAAY,OAChB,iCAEA,0BACKC,GAAK,cACV,2BACMC,KAAO,OACbC,YAAc,aACdT,MAAUH,KAAKT,MAAME,YAAYC,KACjCmB,SAAab,KAAKJ,cANlB,IAOG,4BACIe,KAAO,UADX,UATH,KAcA,+BACUnB,MAAUQ,KAAKT,MAAMC,OAD/B,KAhBK,S,GA1CCsB,IAAMC,WCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.13ae8432.chunk.js","sourcesContent":["import React from 'react';\r\nimport './listItems.css'\r\n\r\nfunction listItems(props) {\r\n    const items = props.items;\r\n    const listItems = items.map(item => {\r\n        return <div className = \"list\"\r\n        key = \"item.key\" >\r\n            <\r\n            p > (item.text) < /p> < /\r\n            div >\r\n    })\r\n    return ( <\r\n        div > { listItems } < /div>\r\n\r\n    )\r\n}\r\nexport default listItems;","import React from 'react';\nimport './App.css';\nimport listItems from './listItems'\n\nclass App extends React.component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n            currentItem: {\n                text: '',\n                key: ''\n            }\n        }\n\n        this.handleInput = this.handleInput.bind(this);\n\n        this.additem = this.additem.bind(this);\n    }\n\n    handleInput(e) {\n        this.setState({\n            currentItem: {\n                text: e.target.value,\n                key: Date.now()\n            }\n        })\n    }\n    addItem(e) {\n        e.preventDefault();\n        const newItem = this.state.currentItem;\n        if (newItem.text === \"\") {\n            const newItems = [...this.state.items, newItem];\n            this.setState({\n                items: newItems,\n                currentItem: {\n                    text: '',\n                    key: ''\n                }\n            })\n\n        }\n\n    }\n\n    render() {\n        return ( <\n            div className = 'App' >\n            <\n            hearder >\n            <\n            form id = \"to-do-form\" >\n            <\n            input type = \"text\"\n            placeholder = \"Enter text\"\n            value = { this.state.currentItem.text }\n            onChange = { this.handleInput }\n            /> <\n            button type = \"submit\" > Add < /button>\n\n            <\n            /form> </hearder >\n            <\n            listitems items = { this.state.items } > < /listitems> < /\n            div >\n        );\n    }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}